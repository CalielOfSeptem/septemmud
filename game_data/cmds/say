--[[say version:0.0.1]]-------------------------------
--[[------------------------------------------------------
	Say command allows players/NPCs to speak
	
	Copyright (C) 2018, by Caliel (kenthompson1@gmail.com)
	All Rights Reserved.
	
	## 0.0.1 - 2018-02-10
	###
	- Initial release
--]]------------------------------------------------------
inherit command

c = command.new('say', 0) -- priority zero means that this command will win out over other similar commands, e.g., lo will resolve to look rather than locate.
c:SetAliases({'\''})
--c:SetSynonyms({'peer'})
-- o is the base_entity from which the command originated.  Cmd is the command text.  Note that the verb
-- which initiated the command will be the first element in cmd.  Ex/ > look, cmd="look", >look chest, cmd = "look chest"

function c:ExecuteCommand ( o, cmd )
	
	
	if o ~= nil then
		--if( o:GetType():lower() == "player" ) then
		--	o = player_cast(o)
		--end
		-- lets see what room the player/npc is in..
		-- there are two ways, through GetEnvironment, or through GetRoom
		-- GetEnvironment requires a cast as its generic to all game items/players.
		-- GetRoom does not as its already a room object ptr
		-- example: env = room_cast(p:GetEnvironment())
		env = o:GetRoom()

		if env ~= nil then
		--print(cmd)
		local c = cmd:sub(1,1)
			if c == '\'' or c == '\"' then
				cmd = string.sub(cmd, 2)
			else
				for i in string.gmatch(cmd, "%S+") do
				   --print(i)
				   cmd = trim(string.gsub(cmd, i, '', 1))
				   break
				end
			end
			--print(cmd)
			--print( inspect( words ) )
			--s = string.gsub("Lua is cute", "cute", "great")
			
			o:SendToPlayer('You say, "' .. cmd .. '."');
			pname = string.gsub(o:GetName(), "(%a)([%w_']*)", titleCase)
			o:SendToRoom( pname .. ' says "' .. cmd .. '."')
			return true;
		end	
	end
end



