inherit command

	
c = command.new('look', 0) -- priority zero means that this command will win out over other similar commands, e.g., lo will resolve to look rather than locate.
c:SetAliases( { 'l' } )
-- o is the base_entity from which the command originated.  Cmd is the command text.  Note that the verb
-- which initiated the command will be the first element in cmd.  Ex/ > look, cmd="look", >look chest, cmd = "look chest"



function c:ExecuteCommand ( o, cmd )
	--print(inspect(_ENV))
	--print('Look command called..')
	--p = player_cast(o)
	if o ~= nil then
		--tail( '/home/ken/git-repos/septemmud/game_data/logs/L-2017-03-17.log', 10000, true)
		--if( o:GetType():lower() == "player" ) then
		--	o = player_cast(o)
		--end
		-- lets see what room the player/npc is in..
		-- there are two ways, through GetEnvironment, or through GetRoom
		-- GetEnvironment requires a cast as its generic to all game items/players.
		-- GetRoom does not as its already a room object ptr
		-- example: env = room_cast(p:GetEnvironment())
		env = o:GetRoom()
		
		if env ~= nil then
			s = FormatRoom(env, o)
			--p:SendToEntity('[' .. env:GetTitle() .. ']')
			--p:SendToEntity('\r\n')
			o:SendToEntity(s .. '\r\n')
			
		end	
	end
end

function FormatRoom(r, o)
	local s = "[" .. r:GetTitle() .. "]\r\n"
	s = s .. r:GetDescription() .. " "
	
	local items = r:GetItems()
	if( #items > 0 ) then
		--s = s .. "\r\n"
		s = s .. "You also see "
	
		for i = 1, #items do
			local iname = items[i]:GetCurrentName()
			str = iname
			--print( items[i]:GetCurrentStackCount() )
			--if( items[i].isStackable and items[i]:GetCurrentStackCount() > 1 ) then
			
			--	str = items[i]:GetPluralName()
			--end
			if i ~= #items then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end
	
	local players = r:GetPlayers(o:GetName())
	if( #players > 0 ) then
		s = s .. "\r\n"
		s = s .. "Also here: "
	
		for i = 1, #players do
			local po = player_cast(players[i])
			--print(po)
			local pname = po:GetPlayerName()
			--firstToUpper(pname)
			pname = string.gsub(pname, "(%a)([%w_']*)", titleCase)
			--str = myTable[1]
			str = pname--str:lower()
			if i ~= #players then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end

		
	s = s .. "\r\nObvious paths: "
	local exits = r:GetExits()
	if( #exits == 0 ) then
		s = s .. 'none.'
	end
	for i = 1, #exits do
		local myTable = exits[i]:GetExit()
		str = myTable[1]
		str = str:lower()
		if i ~= #exits then
			str = str .. ', '

		else
			str = str .. '.' 
		end
		s = s .. str
	end

	
	return s

end

