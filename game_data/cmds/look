--[[look version:0.0.1]]-------------------------------
--[[------------------------------------------------------
	Look command allows players to look at/in objects and to look in their present room
	
	Copyright (C) 2018, by Caliel (kenthompson1@gmail.com)
	All Rights Reserved.
	
	## 0.0.1 - 2018-02-10
	###
	- Initial release
--]]------------------------------------------------------
inherit command
c = command.new('look') 
c:SetAliases( { 'l' } )
-- o is the base_entity from which the command originated.  Cmd is the command text.  Note that the verb
-- which initiated the command will be the first element in cmd.  Ex/ > look, cmd="look", >look chest, cmd = "look chest"

function c:FindItemInHand( hand, item_to_find )
	if( hand:IsEmpty() == false ) then
		local i = hand:GetItem():GetItemNoun()
		if( i:lower():starts(item_to_find) ) then
			return hand:GetItem()
		end
	end
	return nil
end

function c:CheckHands( o, item_to_find )
	local item = c:FindItemInHand( o:LeftHand(), item_to_find )
	if( item ~= nil ) then
		--if( item:GetIsContainer() ) then
			--self:ShowInventory( item, o )
		----else
			-- TODO: just show the item, its not a container.
		--end
		--print('FOUND IT IN THE LEFT HAND')
		--o:SendToEntity('FOUND IT IN THE LEFT HAND')
		return item
	end
	
	item = c:FindItemInHand( o:RightHand(), item_to_find )
	if( item ~= nil ) then
		--if( item:GetIsContainer() ) then
			--self:ShowInventory( item, o )
		--else
			-- TODO: just show the item, its not a container.
		--end
		--print('FOUND IT IN THE RIGHT HAND')
		--o:SendToEntity('FOUND IT IN THE RIGHT HAND')
		return item
	end
	return nil
end

function c:FindItemInInv( o, item_to_find )
--print(item_to_find)
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	local r_hand = player:RightHand():GetItem()
	if( r_hand ~= nil and ( r_hand:GetItemNoun():lower():starts(item_to_find)  or r_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
			skip_index = skip_index - 1
			
			if ( skip_index == 0 ) then 
				return r_hand
			end
	end
		
	local l_hand = player:LeftHand():GetItem()
	if( l_hand ~= nil and ( l_hand:GetItemNoun():lower():starts(item_to_find)  or l_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
		skip_index = skip_index - 1
		
		if ( skip_index == 0 ) then 
			return l_hand
		end
	end
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find) or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end

	return nil
end

function c:FindItemInInv2( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	local found_item = nil
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
end


function c:FindItemInEnv( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local items = room:GetItems()
	
	for i = 1, #items do
	
		if( items[i]:GetItemNoun():lower():starts(item_to_find) or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then

			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking

			return items[i]
		end
		::continue::
	end
	

	return nil
	
end

function c:FindItemInLooks( o, item_to_find )

	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local looks = room:GetLooks()

	for i = 1, #looks do
		local look = looks[i]:GetLook()

		for j = 1, #look do

			if( look[j]:lower():starts(item_to_find)) then
				skip_index = skip_index - 1
				
				if ( skip_index ~= 0 ) then goto continue end -- keep looking
				
				return looks[i]
			end
			::continue::
		end
	end
	return nil
end

function c:ShowInventory( item, o )
	local items = item:GetItems()
	if( #items == 0 ) then
		o:SendToEntity('The ' .. item:GetItemNoun() .. ' is empty.') 
		return
	end
	local s = 'You look in the ' .. item:GetItemNoun() .. ' and see '
	if( #items > 0 ) then
		for i = 1, #items do
			local iname = items[i]:GetName()
			str = iname
			--print( items[i]:GetCurrentStackCount() )
			--if( items[i]:GetIsStackable() and items[i]:GetCurrentStackCount() > 1 ) then
			
			--	str = items[i]:GetPluralName()
			--end
			if i ~= #items then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end
	o:SendToEntity(s)
end

function FormatRoom(r, o)
	local s = "[" .. r:GetTitle() .. "]\r\n"
	s = s .. r:GetDescription() .. " "
	
	local items = r:GetItems()
	if( #items > 0 ) then
		--s = s .. "\r\n"
		s = s .. "You also see "
	
		for i = 1, #items do
			local iname = items[i]:GetName()
			str = iname
			--print( items[i]:GetCurrentStackCount() )
			--if( items[i]:GetIsStackable() and items[i]:GetCurrentStackCount() > 1 ) then
			
			--	str = items[i]:GetPluralName()
			--end
			if i ~= #items then
				str = str .. ', '

			--else
			--	str = str .. '.' 
			end
			s = s .. str
		end
	end
	
	local npcs = r:GetNPCs()
	if( #npcs > 0 ) then
		--s = s .. "\r\n"
		if( #items == 0 ) then
			s = s .. "You also see "
			else
			s = s .. ', '
		end
	
		for i = 1, #npcs do
			local iname = npcs[i]:GetName()
			str = iname
			if i ~= #npcs then
				str = str .. ', '

			--else
			--	str = str .. '.' 
			end
			s = s .. str
		end
	end
	s = s .. '.' 
	
	local players = r:GetPlayers(o:GetName())
	if( #players > 0 ) then
		s = s .. "\r\n"
		s = s .. "Also here: "
	
		for i = 1, #players do
			--print( 'Name: ' .. players[i]:GetName() )
			local po = player_cast(players[i])

			local pname = po:GetPlayerName()
			--firstToUpper(pname)
			pname = string.gsub(pname, "(%a)([%w_']*)", titleCase)
			--str = myTable[1]
			str = pname--str:lower()
			if( po:GetBodyPosition() == entityBodyPosition.prone ) then
				str = str .. ', who is lying down'
				elseif ( po:GetBodyPosition() == entityBodyPosition.kneeling ) then
					str = str .. ', who is kneeling'
				elseif( po:GetBodyPosition() == entityBodyPosition.sitting ) then
					str = str .. ', who is seated'
				else
			end
			
			if i ~= #players then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end

		
	s = s .. "\r\nObvious paths: "
	local exits = r:GetExits()
	if( #exits == 0 ) then
		s = s .. 'none.'
	end
	for i = 1, #exits do
		local myTable = exits[i]:GetExit()
		str = myTable[1]
		str = str:lower()
		if i ~= #exits then
			str = str .. ', '

		else
			str = str .. '.' 
		end
		s = s .. str
	end

	
	return s

end


function c:ExecuteCommand ( o, cmd )
	o = living_cast(o)
	if o ~= nil then
		-- lets see what room the player/npc is in..
		-- there are two ways, through GetEnvironment, or through GetRoom
		-- GetEnvironment requires a cast as its generic to all game items/players.
		-- GetRoom does not as its already a room object ptr
		-- example: env = room_cast(p:GetEnvironment())
		
		-- check to see if the 'my' operator was included..
		local sm1 = string.match(cmd, "in my .+")
		if sm1 ~= nil then
			local myTable = sm1:split( ' ' )
			local item_to_examine = myTable[3]
			fitem = self:FindItemInInv( o, item_to_examine )
			if( fitem ) then
				if( fitem.isContainer == false ) then
					o:SendToEntity('You can\'t look in that!')
					return true
				end
				if( fitem.isContainer and fitem.isOpen == false) then
					o:SendToEntity('The ' .. fitem:GetItemNoun() .. ' is closed.')
					return true
				end
				self:ShowInventory( fitem, o )
				return true
			end
			o:SendToEntity('Look in what? No such object exists.')
			return true
		end
		-- now check if the in modifier was used..
		local sm2 = string.match(cmd, "in .+")
		if sm2 ~= nil then
			local myTable = sm2:split( ' ' )
			local item_to_examine = myTable[2]
			
			-- first, check the ground. 
			fitem = self:FindItemInEnv( o, item_to_examine )
			-- now check the player's inventory
			if( fitem == nil ) then	fitem = self:FindItemInInv( o, item_to_examine ) end

			
			if( fitem ) then
				if( fitem.isContainer == false ) then
					o:SendToEntity('You can\'t look in that!')
					return true
				end
				if( fitem.isContainer and fitem.isOpen == false) then
					o:SendToEntity('The ' .. fitem:GetItemNoun() .. ' is closed.')
					return true
				end
				self:ShowInventory( fitem, o )
				return true
			end
			o:SendToEntity('Look in what? No such object exists.')
			return true
		end
		
		-- check if the player is looking at an item.. 
		
		local myTable = cmd:split( ' ' )
		
		if( #myTable > 1 ) then -- looking at an item
			table.remove(myTable, 1) -- remove look part
			local item_to_examine = table.concat(myTable, " ") -- put it back together
			
			local fitem = self:FindItemInEnv( o, item_to_examine )
			
			if( fitem == nil ) then
				fitem = self:FindItemInLooks( o, item_to_examine )
			end
			
			--if( fitem == nil ) then
			--	fitem = self:CheckHands( o, item_to_examine )
			--end
			
			if( fitem == nil ) then
				fitem = self:FindItemInInv( o, item_to_examine )
			end
			
			if( fitem ) then
				--print('FOUND IT!')
				o:SendToEntity( fitem:GetDescription() )
				return true
			end
			o:SendToEntity('Look at what?')
			return true
			
		end
		
		
		env = o:GetRoom()
		
		if env ~= nil then
			s = FormatRoom(env, o)
			--p:SendToEntity('[' .. env:GetTitle() .. ']')
			--p:SendToEntity('\r\n')
			--print('in here..')
			o:SendToEntity(s)
			--print('in here')
		end	
	end
	return true
end


