inherit command

	
c = command.new('look', 0) -- priority zero means that this command will win out over other similar commands, e.g., lo will resolve to look rather than locate.
--c:SetSynonyms({'peer'})
-- o is the base_entity from which the command originated.  Cmd is the command text.  Note that the verb
-- which initiated the command will be the first element in cmd.  Ex/ > look, cmd="look", >look chest, cmd = "look chest"



function command:ExecuteCommand ( o, cmd )
	print('Look command called..')
	--p = player_cast(o)
	if o ~= nil then
		-- lets see what room the player/npc is in..
		-- there are two ways, through GetEnvironment, or through GetRoom
		-- GetEnvironment requires a cast as its generic to all game items/players.
		-- GetRoom does not as its already a room object ptr
		-- example: env = room_cast(p:GetEnvironment())
		env = o:GetRoom()

		if env ~= nil then
			s = FormatRoom(env)
			--p:SendToEntity('[' .. env:GetTitle() .. ']')
			--p:SendToEntity('\r\n')
			o:SendToEntity(s .. '\r\n')
		end	
	end
end

function FormatRoom(r)
	s = "[" .. r:GetTitle() .. "]\r\n"
	s = s .. r:GetDescription() .. "\r\n"
	s = s .. "Obvious paths: "
	exits = r:GetExits()
	for i = 1, #exits do
		print('iterating exits..')
		local myTable = exits[i]:GetExit()
		str = myTable[1]
		str = str:lower()
		if i ~= #exits then
			str = str .. ', '

		else
			str = str .. '.' 
		end
		s = s .. str
	end
	
	return s

end

