inherit command

	
c = command.new('look', 0) -- priority zero means that this command will win out over other similar commands, e.g., lo will resolve to look rather than locate.
c:SetAliases( { 'l' } )
-- o is the base_entity from which the command originated.  Cmd is the command text.  Note that the verb
-- which initiated the command will be the first element in cmd.  Ex/ > look, cmd="look", >look chest, cmd = "look chest"

function c:FindItemInHand( hand, item_to_find )
	if( hand:IsEmpty() == false ) then
		local i = hand:GetItem():GetItemNoun()
		if( i:lower():starts(item_to_find) ) then
			return hand:GetItem()
		end
	end
	return nil
end

function c:CheckHands( o, item_to_find )
	local item = c:FindItemInHand( o:LeftHand(), item_to_find )
	if( item ~= nil ) then
		if( item:GetIsContainer() ) then
			self:ShowInventory( item, o )
		else
			-- TODO: just show the item, its not a container.
		end
		return true
	end
	
	item = c:FindItemInHand( o:RightHand(), item_to_find )
	if( item ~= nil ) then
		if( item:GetIsContainer() ) then
			self:ShowInventory( item, o )
		else
			-- TODO: just show the item, its not a container.
		end
		return true
	end
	return false
end

function c:FindItemInEnv( o, item_to_find )

	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local items = room:GetItems()
	local found_item = nil
	
	for i = 1, #items do
	--print(i)
	--print( items[i]:GetItemNoun() )
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
		--print(i)
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			found_item = items[i]
		end
		::continue::
	end
	
	if found_item == nil then
		--o:SendToEntity('Look in what? No such object exists.')
		return false
	end
	
	if( found_item:GetIsContainer() ) then
		self:ShowInventory( found_item, o )
	else
	-- TODO: just look at item, its not a container
	end
	
end

function c:ShowInventory( item, o )
	local items = item:GetItems()
	if( #items == 0 ) then
		o:SendToEntity('The ' .. item:GetItemNoun() .. ' is empty.') 
		return
	end
	local s = 'You look in the ' .. item:GetItemNoun() .. ' and see '
	if( #items > 0 ) then
		for i = 1, #items do
			local iname = items[i]:GetName()
			str = iname
			--print( items[i]:GetCurrentStackCount() )
			--if( items[i].isStackable and items[i]:GetCurrentStackCount() > 1 ) then
			
			--	str = items[i]:GetPluralName()
			--end
			if i ~= #items then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end
	o:SendToEntity(s)
end

function c:ExecuteCommand ( o, cmd )
	--print(inspect(_ENV))
	--print('Look command called..')
	--p = player_cast(o)
	o = living_cast(o)
	if o ~= nil then
		--tail( '/home/ken/git-repos/septemmud/game_data/logs/L-2017-03-17.log', 10000, true)
		--if( o:GetType():lower() == "player" ) then
		--	o = player_cast(o)
		--end
		-- lets see what room the player/npc is in..
		-- there are two ways, through GetEnvironment, or through GetRoom
		-- GetEnvironment requires a cast as its generic to all game items/players.
		-- GetRoom does not as its already a room object ptr
		-- example: env = room_cast(p:GetEnvironment())
		local sm1 = string.match(cmd, "in my .+")
		-- TODO, fix this stuff later..
		if sm1 ~= nil then
			local myTable = sm1:split( ' ' )
			--print (sm1)
			local item_to_examine = myTable[3]
			--print(item_to_examine)
			--print( item_to_examine )
			self:CheckHands( o, item_to_examine )

			return true
		end
		
		local sm2 = string.match(cmd, "in .+")
		if sm2 ~= nil then
			local myTable = sm2:split( ' ' )
			local item_to_examine = myTable[2]
			if( self:FindItemInEnv( o, item_to_examine ) ) then
				return true
			end
			if( self:CheckHands( o, item_to_examine ) ) then -- try hands..
				return true
			end
			o:SendToEntity('Look in what? No such object exists.')
			return true
		end
		-- TODO, fix this stuff later..
		
		
		env = o:GetRoom()
		
		if env ~= nil then
			s = FormatRoom(env, o)
			--p:SendToEntity('[' .. env:GetTitle() .. ']')
			--p:SendToEntity('\r\n')
			o:SendToEntity(s .. '\r\n')
			
		end	
	end
end

function FormatRoom(r, o)
	local s = "[" .. r:GetTitle() .. "]\r\n"
	s = s .. r:GetDescription() .. " "
	
	local items = r:GetItems()
	if( #items > 0 ) then
		--s = s .. "\r\n"
		s = s .. "You also see "
	
		for i = 1, #items do
			local iname = items[i]:GetName()
			str = iname
			--print( items[i]:GetCurrentStackCount() )
			--if( items[i].isStackable and items[i]:GetCurrentStackCount() > 1 ) then
			
			--	str = items[i]:GetPluralName()
			--end
			if i ~= #items then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end
	
	local players = r:GetPlayers(o:GetName())
	if( #players > 0 ) then
		s = s .. "\r\n"
		s = s .. "Also here: "
	
		for i = 1, #players do
			local po = player_cast(players[i])
			--print(po)
			local pname = po:GetPlayerName()
			--firstToUpper(pname)
			pname = string.gsub(pname, "(%a)([%w_']*)", titleCase)
			--str = myTable[1]
			str = pname--str:lower()
			if i ~= #players then
				str = str .. ', '

			else
				str = str .. '.' 
			end
			s = s .. str
		end
	end

		
	s = s .. "\r\nObvious paths: "
	local exits = r:GetExits()
	if( #exits == 0 ) then
		s = s .. 'none.'
	end
	for i = 1, #exits do
		local myTable = exits[i]:GetExit()
		str = myTable[1]
		str = str:lower()
		if i ~= #exits then
			str = str .. ', '

		else
			str = str .. '.' 
		end
		s = s .. str
	end

	
	return s

end

