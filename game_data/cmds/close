inherit command
c = command.new('close')

function getNameWithDefArticle( item )
	local iname = item:GetName()
	if( iname ) then
		local myTable = iname:split( ' ' )
		myTable[1] = 'the'
		return table.concat(myTable, " ") -- put it back together
	end
	return ''
end

function c:FindItemInEnv( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local items = room:GetItems()
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	
	local doors = o:GetRoom():GetDoors()

	for i = 1, #doors do
		local maybe_door = doors[i]:GetName():split( ' ' )
		table.remove(maybe_door, 1) -- remove a or an
		local door_name = table.concat(maybe_door, " ") -- put it back together

		if( door_name:lower():find(item_to_find) ) then
			skip_index = skip_index - 1
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return doors[i]
		
		end
		::continue::
	end			
	
	return nil
	
end

function c:FindItemInInv( o, item_to_find )
--print(item_to_find)
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	local r_hand = player:RightHand():GetItem()
	if( r_hand ~= nil and ( r_hand:GetItemNoun():lower():starts(item_to_find)  or r_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
			skip_index = skip_index - 1
			
			if ( skip_index == 0 ) then 
				return r_hand
			end
	end
		
	local l_hand = player:LeftHand():GetItem()
	if( l_hand ~= nil and ( l_hand:GetItemNoun():lower():starts(item_to_find)  or l_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
		skip_index = skip_index - 1
		
		if ( skip_index == 0 ) then 
			return l_hand
		end
	end
		
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
end



function c:CloseItem(o, item_to_close, from_player_inventory)
	
	--if( o:RightHand():IsEmpty() ~= true and o:LeftHand():IsEmpty() ~= true ) then
	--	o:SendToEntity('Both of your hands are full! Free a hand to open the ' .. item_to_close:GetItemNoun() .. '.')
	--	return false
	--end
	
	item_to_find = item_cast(item_to_close)
	
	if( item_to_close:GetIsOpen() ~= true ) then
		o:SendToEntity('The ' .. item_to_close:GetItemNoun() .. ' is already closed.')
		return false
	end
	
	if( from_player_inventory ) then
		to_player = 'your'
		if( o:GetGender() == entityGender.male ) then
			to_env = 'his'
		elseif( o:GetGender() == entityGender.female ) then
			to_env = 'her'
		elseif( o:GetGender() == entityGender.unknown ) then
			to_env = 'it\'s'
		end
	end
	item_to_close:SetIsOpen(false)
	o:SendToEntity('You close ' .. getNameWithDefArticle(item_to_close) .. '.')
	local pname = string.gsub(o:GetName(), "(%a)([%w_']*)", titleCase)
	o:SendToRoom( pname .. ' closes ' .. getNameWithDefArticle(item_to_close) .. '.')	
	maybe_door = door_cast(item_to_close)
	
	if( maybe_door ) then
		local maybe_other_side = item_to_close:GetOtherRoom()

		if( maybe_other_side ) then

				-- TODO: May need to trim the item_to_close output here as the door may not have any adjectives set.
				maybe_other_side:SendToRoom( 'The ' .. item_to_close:GetItemAdjectives() .. ' ' .. item_to_close:GetItemNoun() .. ' closes.' )

		end
	end

	return false
	
end

	
function c:ExecuteCommand ( o_orig, cmd )

	s_type = o_orig:GetType()
	
	if (s_type:lower() ~= "player" and s_type:lower() ~= "npc") then
		return true;
	end
	
	o = living_cast(o_orig)
	if ( o == nil ) then 
		return true 
	end	
	
	local myTable = cmd:split( ' ' )
	if #myTable < 2 then
		usage(o)
		return true;
	end
	--print('here')

	table.remove(myTable, 1) -- remove close part
--	local item_to_find = myTable[1]:lower() -- at this point we should have an object..
--	local s1 = myTable[1]

	
	if( #myTable == 0 ) then
		usage(o)
		return true;
	end
	
	
	--table.remove(myTable, 1)

	local cmd = table.concat(myTable, " ") -- put it back together

	sm1 = string.match(cmd, "my .+")
	-- TODO, fix this stuff later..
	if sm1 then
		local myt = cmd:split( ' ' )
		-- limit to player's inventory
		local fitem = c:FindItemInInv( o, myt[2])
		if( fitem ~= nil ) then
			if( fitem.isContainer == true ) then
				return self:CloseItem( o, fitem, true )
			else
				o_orig:SendToEntity('You can\'t close that!')
				return true
			end
		end
		o:SendToEntity('What are you trying to close?')
		return true
	end
	
	item_to_find = cmd
	--print( cmd )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local found_item = self:FindItemInEnv( o, item_to_find )
	if( found_item ) then
		return self:CloseItem( o, found_item )
	end
	
	if( found_item == nil ) then 
		found_item = self:FindItemInInv( o, item_to_find )
		if( found_item ) then
			return self:CloseItem( o, found_item, true )
		end
	end
	
	if found_item == nil then
		o:SendToEntity('Close what?')
		return true
	end
	return true
	--return self:OpenItem( o, found_item )	

end

function usage(o_orig)
	o_orig:SendToEntity('USAGE: close <Implement me later>')
end
