inherit command
c = command.new('get')

function c:MoveItemToHand( o_orig, hand, item_to_get)
	hand:AddToInventory(item_to_get)	
	if( o_orig:GetType():lower() == 'player' ) then
		local player = player_cast(o_orig)
		player:DoSave()
	end
end



function c:FindItemInEnv( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local items = room:GetItems()
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
	
end

function c:FindItemInInv( o, item_to_find )
--print(item_to_find)
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	local r_hand = player:RightHand():GetItem()
	if( r_hand ~= nil and ( r_hand:GetItemNoun():lower():starts(item_to_find)  or r_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
			skip_index = skip_index - 1
			
			if ( skip_index == 0 ) then 
				return r_hand
			end
	end
		
	local l_hand = player:LeftHand():GetItem()
	if( l_hand ~= nil and ( l_hand:GetItemNoun():lower():starts(item_to_find)  or l_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
		skip_index = skip_index - 1
		
		if ( skip_index == 0 ) then 
			return l_hand
		end
	end
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find) or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end

	return nil
end

function c:FindItemHands( o, item_to_find )
--print(item_to_find)
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	local r_hand = player:RightHand():GetItem()
	if( r_hand ~= nil and ( r_hand:GetItemNoun():lower():starts(item_to_find)  or r_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
			skip_index = skip_index - 1
			
			if ( skip_index == 0 ) then 
				return r_hand
			end
	end
		
	local l_hand = player:LeftHand():GetItem()
	if( l_hand ~= nil and ( l_hand:GetItemNoun():lower():starts(item_to_find)  or l_hand:GetItemPluralNoun():lower():starts(item_to_find) ) ) then
		skip_index = skip_index - 1
		
		if ( skip_index == 0 ) then 
			return l_hand
		end
	end

	return nil
end



function c:ScanWearables(o, item_to_find)
	local player = living_cast(o)
	local items = player:GetItems()
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			--skip_index = skip_index - 1
			
			--if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		--::continue::
	end
	return nil
end

function c:FindItemInAllInvContainers( o, item_to_find )
	local player = living_cast(o)
	local items = player:GetItems()
	--print('searching')
	
	local r_hand = player:RightHand():GetItem()
	if( r_hand ~= nil ) then
		if( r_hand.isContainer and r_hand.isOpen == true ) then
			--print('looking in here')
			local found_item = self:FindItemInContainer( o, r_hand, item_to_find )
			if( found_item ) then
				--print('sound it!!!')
				return found_item, r_hand
			end
		end
	end
		
	local l_hand = player:LeftHand():GetItem()
	if( l_hand ~= nil ) then
		if( l_hand.isContainer and l_hand.isOpen == true ) then
			--print('looking in here')
			local found_item = self:FindItemInContainer( o, l_hand, item_to_find )
			if( found_item ) then
				--print('sound it!!!')
				return found_item, l_hand
			end
		end
	end
	
	
	for i = 1, #items do
		if( items[i].isContainer and items[i].isOpen == true ) then
			--print('looking in here')
			local found_item = self:FindItemInContainer( o, items[i], item_to_find )
			if( found_item ) then
				--print('sound it!!!')
				return found_item, items[i]
			end
		end
	end
	return nil
end


function c:FindItemInContainer( o, container, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
	end
	
	local items = container:GetItems()
	--print(container:GetName())
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			--print ('found it')
			return items[i]
		end
		::continue::
	end
	return nil
end

function c:GetInvItem(o, item_to_get, from_where, from_player_inventory)
	if( o:RightHand():IsEmpty() ~= true and o:LeftHand():IsEmpty() ~= true ) then
		o:SendToEntity('Both of your hands are already full.')
		return false;
	end
	
	--local article = 'from the' -- the whole idea here is to change from 'from the' to 'from your' in cases where you are picking stuff up off the ground
	local to_player = 'from the'
	local to_env = 'from the'
	
	if( from_player_inventory ) then
		to_player = 'from your'
		if( o:GetGender() == entityGender.male ) then
			to_env = 'from his'
		elseif( o:GetGender() == entityGender.female ) then
			to_env = 'from her'
		elseif( o:GetGender() == entityGender.unknown ) then
			to_env = 'from it\'s'
		end
	end
	
	if( o:RightHand():IsEmpty() ) then
		self:MoveItemToHand( o, o:RightHand(), item_to_get )
		o:SendToEntity('You get ' .. item_to_get:GetName() .. ' ' .. to_player .. ' ' .. from_where:GetItemNoun() .. '.')
		local pname = string.gsub(o:GetName(), "(%a)([%w_']*)", titleCase)
		o:SendToRoom( pname .. ' gets ' .. item_to_get:GetName() .. ' ' .. to_env .. ' ' .. from_where:GetItemNoun() .. '.')	
		return true
	end
	
	if( o:LeftHand():IsEmpty() ) then
		self:MoveItemToHand( o, o:LeftHand(), item_to_get )
		o:SendToEntity('You get ' .. item_to_get:GetName() .. ' ' .. to_player .. ' ' .. from_where:GetItemNoun() .. '.')
		local pname = string.gsub(o:GetName(), "(%a)([%w_']*)", titleCase)
		o:SendToRoom( pname .. ' gets ' .. item_to_get:GetName() .. ' ' .. to_env .. ' ' .. from_where:GetItemNoun() .. '.')	
		return true
	end
	return false
end

	
function c:ExecuteCommand ( o_orig, cmd )

	s_type = o_orig:GetType()
	
	if (s_type:lower() ~= "player" and s_type:lower() ~= "npc") then
		return true;
	end
	
	o = living_cast(o_orig)
	if ( o == nil ) then 
		return true 
	end	
	
	local myTable = cmd:split( ' ' )
	if #myTable < 2 then
		usage(o)
		return true;
	end
	
	-- remove get portion
	table.remove(myTable, 1)
	
	local s1 = myTable[1]
	
	--local plimit = false
	
	--if( s1:lower() == 'my' ) then
	--	plimit = true -- limit to player
	--end
	
	--table.remove(myTable, 1)
	
	if( #myTable == 0 ) then
		usage(o)
		return true;
	end
	
	local item_to_find = myTable[1]:lower() -- at this point we should have an object..
	table.remove(myTable, 1)

	local cmd = table.concat(myTable, " ") -- put it back together

	sm1 = string.match(cmd, "from my .+")
	-- TODO, fix this stuff later..
	if sm1 then
		local myt = cmd:split( ' ' )
		-- limit to player's inventory
		local fitem = c:FindItemInInv( o, myt[3])
		if( fitem ~= nil ) then
			if( fitem.isContainer == true and fitem.isOpen == false ) then
				o_orig:SendToEntity('The ' .. fitem:GetItemNoun() .. ' is closed.')
				return true;
			end
			if( fitem.isContainer == true ) then
				f = c:FindItemInContainer( o, fitem, item_to_find )
				if( f ) then
					-- found it..
					c:GetInvItem( o, f, fitem, true)
					return true
				end
			else
				o_orig:SendToEntity('You can\'t get anything from that!')
				return true
			end
		end
		o:SendToEntity('What are you trying to GET from?')
		return true
	else
		sm2 = string.match(cmd, "from .+")
		if sm2 then
			local myt = sm2:split( ' ' )
			--print( myt[2] )
			local fitem = c:FindItemInEnv( o, myt[2])
			if( fitem ~= nil ) then
				if( fitem.isContainer == true and fitem.isOpen == false ) then
					o_orig:SendToEntity('The ' .. fitem:GetItemNoun() .. ' is closed.')
					return true;
				end
				if( fitem.isContainer == true ) then
					local f = c:FindItemInContainer( o, fitem, item_to_find )
					if( f ) then
						-- found it..
						c:GetInvItem( o, f, fitem )
						return true
					end
				else
					o_orig:SendToEntity('You can\'t get anything from that!')
					return true
				end
			end
			
			local fitem = c:FindItemInHands( o, myt[2])
			if( fitem ~= nil ) then
				if( fitem.isContainer == true and fitem.isOpen == false ) then
					o_orig:SendToEntity('The ' .. fitem:GetItemNoun() .. ' is closed.')
					return true;
				end
				if( fitem.isContainer == true ) then
					f = c:FindItemInContainer( o, fitem, item_to_find )
					if( f ) then
						-- found it..
						c:GetInvItem( o, f, fitem, true  )
						return true
					end
				else
					o_orig:SendToEntity('You can\'t get anything from that!')
					return true
				end
			end
			
			o:SendToEntity('What are you trying to get?')
			return true

		end

	end
	
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	found_item = self:FindItemInEnv( o, item_to_find )
	--if( found_item == nil ) then
	--	found_item = self:FindItemHands( o, item_to_find )
	--end
	
	if( found_item == nil ) then
		found_item = self:ScanWearables( o, item_to_find )
		if( found_item ~= nil ) then
			o:SendToEntity('You are wearing that, try removing it first.')
			return true
		end
	end
	
	if( found_item == nil ) then
		found_item, in_container = self:FindItemInAllInvContainers( o, item_to_find )
		if( found_item ~= nil ) then
			c:GetInvItem(o, found_item, in_container, true)
			--o:SendToEntity('You are wearing that, try removing it first.')
			return true
		end
	end
	
	if found_item == nil then
		o:SendToEntity('Get what?')
		return true
	end
	
	
	if( o:RightHand():IsEmpty() ~= true and o:LeftHand():IsEmpty() ~= true ) then
		o:SendToEntity('Both of your hands are already full.')
		return true;
	end
	
	if( o:RightHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:RightHand(), found_item )
		o_orig:SendToEntity('You pick up ' .. found_item:GetName() .. ' in your right hand.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' picks up ' .. found_item:GetName() .. '.')	
		return true;
	end
	
	if( o:LeftHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:LeftHand(), found_item )
		o_orig:SendToEntity('You pick up ' .. found_item:GetName() .. ' in your left hand.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' picks up ' .. found_item:GetName() .. '.')	
		return true;
	end
	return true
end

function usage(o_orig)
	o_orig:SendToEntity('USAGE: get <Implement me later>')
end
