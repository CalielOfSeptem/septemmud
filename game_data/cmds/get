inherit command
c = command.new('get')

function c:MoveItemToHand( o_orig, hand, item_to_get)
	hand:AddToInventory(item_to_get)	
	if( o_orig:GetType():lower() == 'player' ) then
		local player = player_cast(o_orig)
		player:DoSave()
	end
end

function c:FindItemInInv( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
		--print(i)
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
end

function c:FindItemInEnv( o, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local room = player:GetRoom()
	local items = room:GetItems()
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
	
end

function c:FindItemInInv( o, item_to_find )
print(item_to_find)
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o)
	local items = player:GetItems()
	
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
end

function c:FindItemInContainer( o, container, item_to_find )
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local items = container:GetItems()
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			return items[i]
		end
		::continue::
	end
	return nil
end

function c:GetInvItem(o, item_to_get, from_where)
	if( o:RightHand():IsEmpty() ~= true and o:LeftHand():IsEmpty() ~= true ) then
		o:SendToEntity('Both of your hands are already full.')
		return false;
	end
	
	if( o:RightHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:RightHand(), item_to_get )
		o_orig:SendToEntity('You get ' .. item_to_get:GetName() .. ' from your ' .. from_where:GetItemNoun() .. '.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' gets ' .. item_to_get:GetName() .. ' from their ' .. from_where:GetItemNoun() .. '.')	
		return true;
	end
	
	if( o:LeftHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:LeftHand(), item_to_get )
		o_orig:SendToEntity('You get ' .. item_to_get:GetName() .. ' from your ' .. from_where:GetItemNoun() .. '.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' gets ' .. item_to_get:GetName() .. ' from their ' .. from_where:GetItemNoun() .. '.')	
		return true;
	end
	return false
end

	
function c:ExecuteCommand ( o_orig, cmd )

	s_type = o_orig:GetType()
	
	if (s_type:lower() ~= "player" and s_type:lower() ~= "npc") then
		return false;
	end
	
	o = living_cast(o_orig)
	if ( o == nil ) then 
		return false 
	end	
	
	local myTable = cmd:split( ' ' )
	if #myTable < 2 then
		usage(o)
		return true;
	end
	
	-- remove get portion
	table.remove(myTable, 1)
	
	local s1 = myTable[1]
	
	--local plimit = false
	
	--if( s1:lower() == 'my' ) then
	--	plimit = true -- limit to player
	--end
	
	--table.remove(myTable, 1)
	
	if( #myTable == 0 ) then
		usage(o)
		return true;
	end
	
	local item_to_find = myTable[1]:lower() -- at this point we should have an object..
	table.remove(myTable, 1)

	local cmd = table.concat(myTable, " ") -- put it back together

	sm1 = string.match(cmd, "from my .+")
	-- TODO, fix this stuff later..
	if sm1 then
		
		-- limit to player's inventory
		local fitem = c:FindItemInInv( o, sm1[3])
		if( fitem ~= nil ) then
			if( fitem.isContainer == true ) then
				f = c:FindItemInContainer( o, item_to_find, fitem )
				if( f ) then
					-- found it..
					c:GetInvItem( o, f, fitem )
					return true
				end
			else
				o_orig:SendToEntity('You can\'t get that from there!')
				return false
			end
		end
		o:SendToEntity('Get what?')
		return false
	else
		sm2 = string.match(cmd, "from %a+")
		if sm2 then
			-- find object starting in room then to the player's own inventory
			--print('FROM FOUND')
		end
	end
	
	local s_num = string.match(item_to_find, '%d+')
	local skip_index = 1 -- don't skip by default
	if( s_num ~= nil ) then
		skip_index = s_num
		item_to_find = string.match(item_to_find, '%a+')
		--print(s1)
	end
	
	local player = living_cast(o_orig)
	local room = player:GetRoom()
	local items = room:GetItems()
	local found_item = nil
	
	for i = 1, #items do
		if( items[i]:GetItemNoun():lower():starts(item_to_find)  or items[i]:GetItemPluralNoun():lower():starts(item_to_find) ) then
			skip_index = skip_index - 1
			
			if ( skip_index ~= 0 ) then goto continue end -- keep looking
			
			found_item = items[i]
		end
		::continue::
	end
	
	if found_item == nil then
		o:SendToEntity('Get what?')
		return true
	end
	
	
	if( o:RightHand():IsEmpty() ~= true and o:LeftHand():IsEmpty() ~= true ) then
		o:SendToEntity('Both of your hands are already full.')
		return false;
	end
	
	if( o:RightHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:RightHand(), found_item )
		o_orig:SendToEntity('You pick up ' .. item_to_drop:GetName() .. ' in your right hand.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' picks up ' .. item_to_drop:GetName() .. '.')	
		return true;
	end
	
	if( o:LeftHand():IsEmpty() ) then
		self:MoveItemToHand( o_orig, o:LeftHand(), found_item )
		o_orig:SendToEntity('You pick up ' .. item_to_drop:GetName() .. ' in your left hand.')
		local pname = string.gsub(o_orig:GetName(), "(%a)([%w_']*)", titleCase)
		o_orig:SendToRoom( pname .. ' picks up ' .. item_to_drop:GetName() .. '.')	
		return true;
	end
	
	

end

function usage(o_orig)
	o_orig:SendToEntity('USAGE: get <Implement me later>')
end
