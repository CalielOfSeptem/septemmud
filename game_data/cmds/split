inherit command
c = command.new('split')
-- hand is the hand the item should be split INTO, not from
function c:SplitItem( o_orig, hand, item )
	if( item ~= nil ) then
		if( item:isStackable() == false ) then
			o_orig:SendToPlayer('You fumble with the ' .. item:GetItemNoun() .. ' but are unable to find a way to split it.')
			return true -- stop processing, you found the item but its not splittable
		end
		
		if( item:GetCurrentStackCount() == 1 ) then
			o_orig:SendToPlayer('You fumble with the ' .. item:GetItemNoun() .. ' but to no avail.')
			return true -- stop processing, you found the item but its already in its least form..
		else
			--print('you split the item.')
			new_item = clone_item_to_hand( item:GetPhysicalScriptPath(), hand )
			item:DecrementStackCount()
			return true
		end
		
	else 
		return false
	end
end
	
function c:ExecuteCommand ( o_orig, cmd )

	s_type = o_orig:GetType()
	
	if (s_type:lower() ~= "player" and s_type:lower() ~= "npc") then
		return true;
	end
	
	o = living_cast(o_orig)
	if ( o == nil ) then 
		return true 
	end	
	
	local myTable = cmd:split( ' ' )
	if #myTable ~= 2 then
		usage(o)
		return true;
	end
	
	if( o:RightHand():IsEmpty() and o:LeftHand():IsEmpty() ) then
		o:SendToPlayer('Split what? Your hands are empty.')
		return true
	end
	
	if( o:RightHand():IsEmpty() == false and o:LeftHand():IsEmpty() == false ) then
		o:SendToPlayer('Your hands are full, you will need a free hand to split an item.')
		return true
	end
	
	local r_item = o:RightHand():GetItem()
	local l_item = o:LeftHand():GetItem()
	if( c:SplitItem( o, o:LeftHand(), r_item ) ) then
		return true
	end
	if( c:SplitItem( o, o:RightHand(), l_item ) ) then
		return true
	end
	
	return true
end

function usage(o_orig)
	o_orig:SendToEntity('USAGE: split <Implement me later>')
end
