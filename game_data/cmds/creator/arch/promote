--[[promote version:0.0.1]]-------------------------------
--[[------------------------------------------------------
	Promote causes a player to be promoted to a creator, and a creator to be promoted to an arch
	
	Copyright (C) 2018, by Caliel (kenthompson1@gmail.com)
	All Rights Reserved.
	
	## 0.0.1 - 2018-02-10
	###
	- Initial release
--]]------------------------------------------------------
inherit command
c = command.new('promote', 0)

function dump(o)
   if type(o) == 'table' then
      local s = '{ '
      for k,v in pairs(o) do
         if type(k) ~= 'number' then k = '"'..k..'"' end
         s = s .. '['..k..'] = ' .. dump(v) .. ','
      end
      return s .. '} '
   else
      return tostring(o)
   end
end

function c:ExecuteCommand ( o, cmd )
	if o ~= nil then

		local myTable = cmd:split( ' ' )
		if #myTable ~= 2 then
			usage(o)
			return true;
		end
		
		table.remove(myTable, 1) -- remove 'promote' from cmd

		cmd = table.concat(myTable, " ") -- put it back together
		
		-- check if player exists..
		if( get_account_exists( cmd ) == true ) then
			-- make sure the calling object is of type player and that they are an arch..
			if (o:GetType():lower() == 'player' ) then
				obj = player_cast(o)
				
					-- here we simply promote.  If player is an arch, then you cannot promote further
					-- if player is a just a player or a creator, then bump them up a level
				if( do_promote(obj, cmd) ) then
				-- TODO, check if the player is logged in and then handle refreshing their account status
					--obj:SendToEntity('Promoted ' .. cmd .. '.' )
					else
					obj:SendToEntity('Error attempting to promote ' .. cmd .. '. Perhaps you lack the necessary privileges.')
				end
				
				
				
				
			end
			else
			--print(inspect(_ENV))
			--print("my calling environment", getfenv(1))
			--o:SendToEntity('Player ' .. cmd .. ' does not exist! '.. _ENV)
		end
		
	end
	return true
end

function usage(o_orig)
	o_orig:SendToEntity('USAGE: promote <Implement me later>')
end




